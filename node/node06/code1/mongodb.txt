1. 下载mongodb
2. 把mongodb放入到自己能找到的位置 例如: /usr/local 下
3. 配置环境变量, 打开环境变量配置文件, 终端中输入 open .bash_profile
4. 在该文件中添加一行 export PATH=/usr/local/mongodb/bin:$PATH
5. 创建数据库
mongod --dbpath=/Users/qingyun/Desktop/mongoDB --port=27017
--dbpath 数据库路径, --port: 数据库端口号

6. 链接数据库
mongo 默认链接端口号27017
如果设置的端口号不是 27017, 链接数据库使用 mongo ip:端口号
eg: mongo 127.0.0.1:30000

链接成功以后如何使用?
MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。
在高负载的情况下，添加更多的节点，可以保证服务器性能。
MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。
MongoDB 将数据存储为一个文档，数据结构由键值(key=>value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。


SQL术语/概念 	MongoDB术语/概念 	 解释/说明
database 	database 	      数据库
table 	    collection 	      数据库表/集合
row 	    document 	      数据记录行/文档
column 	    field 	          数据字段/域
index 	    index 	          索引
table joins 	  	          表连接,MongoDB不支持
primary key primary key 	  主键,MongoDB自动将_id字段设置为主键

// use 数据库名称 就可以使用或创建数据库
// db 可以查看当前操作的数据库
// show dbs 可以参看数据库列表
// db.dropDatabase() 删除数据库
// show tables 展示数据库中的所有集合(数据表)
// db.collection.drop() 删除集合

// 增
// db.collection.insert(document) 集合中插入文档, 如果该集合不存在, 会自动创建该集合并插入文档

// 改
// upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。
// multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。

    WriteConcern.NONE:没有异常抛出
    WriteConcern.NORMAL:仅抛出网络错误异常，没有服务器错误异常
    WriteConcern.SAFE:抛出网络错误异常、服务器错误异常；并等待服务器完成写操作。
    WriteConcern.MAJORITY: 抛出网络错误异常、服务器错误异常；并等待一个主服务器完成写操作。
    WriteConcern.FSYNC_SAFE: 抛出网络错误异常、服务器错误异常；写操作等待服务器将数据刷新到磁盘。
    WriteConcern.JOURNAL_SAFE:抛出网络错误异常、服务器错误异常；写操作等待服务器提交到磁盘的日志文件。
    WriteConcern.REPLICAS_SAFE:抛出网络错误异常、服务器错误异常；等待至少2台服务器完成写操作。

// db.collection.update(whereStr, {$set:{name: "小明"}}, {upsert: false, multi: true})

// 查看集合中的所有document(文档)
db.collection.find()
db.collection.findOne() 只查看第一条
db.collection.find(document) 根据条件查询


// 删除文档
// 删除一条数据, 如果第二个参数为false, 删除匹配的所有文档
db.col.remove({name: "吴大千"}, true)

db.col.remove({}) 删除集合中的所有文档

操作 	格式 	范例 	RDBMS中的类似语句
等于 	{<key>:<value>} 	db.col.find({"by":"菜鸟教程"}).pretty() 	where by = '菜鸟教程'
小于 	{<key>:{$lt:<value>}} 	db.col.find({"likes":{$lt:50}}).pretty() 	where likes < 50
小于或等于 	{<key>:{$lte:<value>}} 	db.col.find({"likes":{$lte:50}}).pretty() 	where likes <= 50
大于 	{<key>:{$gt:<value>}} 	db.col.find({"likes":{$gt:50}}).pretty() 	where likes > 50
大于或等于 	{<key>:{$gte:<value>}} 	db.col.find({"likes":{$gte:50}}).pretty() 	where likes >= 50
不等于 	{<key>:{$ne:<value>}} 	db.col.find({"likes":{$ne:50}}).pretty() 	where likes != 50

// 年龄 = 33 或者 年龄 = 22
db.col.find({$or:[{age: 33}, {age: 22}]})

// and 和 or 组合使用
// db.col.find({name: "xiaogang", $or: [{age: 20}, {age: 33}]})



















